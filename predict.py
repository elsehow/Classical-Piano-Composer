""" This module generates notes for a midi file using the trained neural
    network """
import pickle
import numpy
from music21 import instrument, note, stream, chord
from lstm import create_network, vocab_size, get_item_names

def generate_output (pickle_file, weights_file):
    # """ Generate a piano midi file """
    #load the durations used to train the model
    with open(pickle_file, 'rb') as filepath:
        durations = pickle.load(filepath)

    # Get all durations
    duration_names = get_item_names(durations)
    # Get all duration names
    n_vocab = vocab_size(durations)
    print('vocab size', n_vocab)

    network_input, normalized_input = prepare_sequences(durations, duration_names, n_vocab)
    # load model
    model = create_network(normalized_input, n_vocab)
    model.load_weights(weights_file)
    # generate notes
    prediction_output = generate_notes(model, network_input, duration_names, n_vocab)
    return prediction_output
    # create_midi(prediction_output)

def prepare_sequences(notes, pitchnames, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 100
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)

def generate_notes(model, network_input, pitchnames, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # generate 500 notes
    for note_index in range(500):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output

def create_midi(notes_output, durations_output):
    """Convert the output from the notes and durations predictions
    to create a midi file."""
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for idx, pattern in enumerate(notes_output):
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # find corresponding duration
        dur = durations_output[idx]
        # increase offset by the duration
        #  (without this, notes would stack!)
        offset += dur

    return stream.Stream(output_notes)


if __name__ == '__main__':
    print('Generating notes...', '')
    notes = generate_output('data/notes', 'weights-notes.hdf5')
    print('done.')
    print('Generating note durations...', '')
    durs = generate_output('data/durations', 'weights-durations.hdf5')
    print('done.')
    print('Assembling notes into MIDI...', '')
    create_midi(notes, durs)
    print('done.')
    OUT_FN = 'test_output.mid'
    midi_stream.write('midi', fp=OUT_FN)
    print('Wrote %s', test_FN)
